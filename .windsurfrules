# Terrarium Project Development Rules

Multi-tenant community platform with per-tenant branding, job boards, events, and member management.

## Project Context
• Tech Stack
  - React 18+ (TypeScript, Vite, Tailwind)
  - State: Jotai (client) + React Query (server)
  - Backend: Supabase (Auth, DB, RLS)
  - UI: Radix UI + Tailwind
  - Forms: React Hook Form + Zod
  - Analytics: Chart.js

• Architecture
  - SaaS with multi-tenant isolation
  - Community-specific routes
  - Row-Level Security (RLS)

## Database Management
1. Migration Structure
   • supabase/migrations/ with YYYYMMDDHHMMSS prefix
   • Consolidated auth migration
   • Archive old migrations

2. Organization
   • Extensions → Schemas → Types → Tables → Functions → Policies
   • Proper dependency order
   • Strategic indexing

3. Documentation
   • README.md: Setup guide
   • DEPENDENCIES.md: Versions
   • SCHEMA_VERSION.md: Changes

4. Security
   • RLS by default
   • Security definer functions
   • Rate limiting
   • Cross-tenant isolation

5. Conventions
   • UUID primary keys
   • Timestamptz
   • JSONB metadata
   • Enum types
   • Foreign keys

## User Types
1. Platform Owners: System administration
2. Community Owners: Tenant management
3. Members: Content access
4. Employers: Job management

## Key Features
• Custom job boards
• Community management
• Analytics dashboard
• Branding controls

## Code Rules
1. TypeScript
   • Strict typing
   • Clear interfaces/enums

2. React Components
   • Functional + hooks
   • Small, focused
   • Typed props

3. State Management
   • React Query: Server state
   • Jotai: Client state
   • Clean separation

4. File Structure
src/
├── components/
│   ├── features/
│   ├── layout/
│   └── ui/
├── pages/
└── lib/

5. Documentation
   • JSDoc/TSDoc
   • AI Context blocks
   • Keep updated

6. Testing
   • Jest/Vitest
   • React Testing Library
   • Error states

7. Security
   • Input validation
   • Output sanitization
   • RLS enforcement

8. Performance
   • Memoization
   • Query optimization
   • Virtualization

## Frontend Rules
1. Design Lock
   • Preserve Tailwind
   • Keep accessibility

2. Component Updates
   • Logic only
   • Preserve props

3. AI Context
/**
 * Purpose: Component role
 * Location: File placement
 * Constraints: Design limits
 */

## Multi-tenant Rules
1. Data Isolation
   • community_id required
   • RLS policies
   • Tenant context

2. Feature Control
   • JSONB settings
   • Feature flags
   • API validation

## Implementation Flow
1. Types/interfaces
2. Data layer
3. Components
4. Error handling
5. Tests
6. Documentation

## Review Checklist
1. Types complete
2. Error handling
3. Tests added
4. Docs updated
5. Security verified
6. Performance checked
7. UI preserved
8. Multi-tenant ready