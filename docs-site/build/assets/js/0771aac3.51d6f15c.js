"use strict";(self.webpackChunkterrarium_documentation=self.webpackChunkterrarium_documentation||[]).push([[344],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(m.Provider,{value:n},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=s(t),p=a,y=l["".concat(m,".").concat(p)]||l[p]||d[p]||i;return t?r.createElement(y,o(o({ref:n},c),{},{components:t})):r.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var u={};for(var m in n)hasOwnProperty.call(n,m)&&(u[m]=n[m]);u.originalType=e,u[l]="string"==typeof e?e:a,o[1]=u;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85653:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const i={sidebar_position:4},o="Ruby SDK (Beta)",u={unversionedId:"sdk/ruby",id:"sdk/ruby",title:"Ruby SDK (Beta)",description:"Our Ruby SDK provides a Ruby-native way to interact with the Terrarium API.",source:"@site/docs/sdk/ruby.md",sourceDirName:"sdk",slug:"/sdk/ruby",permalink:"/docs/sdk/ruby",draft:!1,editUrl:"https://github.com/CharlesIXofFrance/terrarium/tree/main/docs-site/docs/sdk/ruby.md",tags:[],version:"current",lastUpdatedBy:"samgonzalez",lastUpdatedAt:1736901154,formattedLastUpdatedAt:"Jan 15, 2025",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Python SDK",permalink:"/docs/sdk/python"},next:{title:"Go SDK (Beta)",permalink:"/docs/sdk/go"}},m={},s=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Webhooks",id:"webhooks",level:3},{value:"Testing",id:"testing",level:2}],c={toc:s},l="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(l,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ruby-sdk-beta"},"Ruby SDK (Beta)"),(0,a.yg)("p",null,"Our Ruby SDK provides a Ruby-native way to interact with the Terrarium API."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Using bundler\ngem 'terrarium-sdk'\n\n# Or install directly\ngem install terrarium-sdk\n")),(0,a.yg)("h2",{id:"quick-start"},"Quick Start"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"require 'terrarium'\n\n# Initialize the client\nterrarium = Terrarium::Client.new(api_key: 'your-api-key')\n\n# Create a community\ncommunity = terrarium.communities.create(\n  name: 'Tech Hub',\n  description: 'A community for tech enthusiasts'\n)\n\n# List communities\ncommunities = terrarium.communities.list(\n  page: 1,\n  limit: 10\n)\n\n# Get a specific community\ncommunity = terrarium.communities.get('comm_123')\n\n# Update a community\nupdated = terrarium.communities.update(\n  'comm_123',\n  name: 'Updated Name'\n)\n\n# Delete a community\nterrarium.communities.delete('comm_123')\n")),(0,a.yg)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,a.yg)("h3",{id:"configuration"},"Configuration"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"terrarium = Terrarium::Client.new(\n  api_key: 'your-api-key',\n  base_url: 'https://api.custom-domain.com',\n  timeout: 30,\n  retries: 3,\n  headers: {\n    'Custom-Header' => 'value'\n  },\n  logger: Logger.new(STDOUT).tap { |l| l.level = Logger::DEBUG }\n)\n")),(0,a.yg)("h3",{id:"error-handling"},"Error Handling"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},'begin\n  community = terrarium.communities.create(\n    name: \'My Community\'\n  )\nrescue Terrarium::APIError => e\n  puts "API Error: #{e.message}"\n  puts "Status: #{e.status}"\n  puts "Code: #{e.code}"\nrescue Terrarium::NetworkError => e\n  puts "Network Error: #{e.message}"\nrescue => e\n  puts "Unknown error: #{e.message}"\nend\n')),(0,a.yg)("h3",{id:"batch-operations"},"Batch Operations"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"# Create multiple communities\ncommunities = terrarium.communities.create_many([\n  { name: 'Community 1' },\n  { name: 'Community 2' }\n])\n\n# Update multiple communities\nupdated = terrarium.communities.update_many([\n  { id: 'comm_1', name: 'Updated 1' },\n  { id: 'comm_2', name: 'Updated 2' }\n])\n")),(0,a.yg)("h3",{id:"pagination"},"Pagination"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"# Manual pagination\nresponse = terrarium.communities.list(page: 1, limit: 10)\ncommunities = response.data\nmeta = response.meta\n\n# Automatic pagination\nterrarium.communities.each do |community|\n  puts community\nend\n\n# Get all items\nall_communities = terrarium.communities.all\n")),(0,a.yg)("h3",{id:"webhooks"},"Webhooks"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"# Verify webhook signature\nis_valid = terrarium.webhooks.verify_signature(\n  payload: request.body.read,\n  signature: request.headers['x-terrarium-signature'],\n  timestamp: request.headers['x-terrarium-timestamp']\n)\n\n# Handle webhook events\nterrarium.webhooks.on(:community_created) do |event|\n  puts \"New community: #{event.data}\"\nend\n")),(0,a.yg)("h2",{id:"testing"},"Testing"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ruby"},"# Create a test client\ntest_client = Terrarium::Client.new(\n  api_key: 'test-api-key',\n  environment: :test\n)\n\n# Mock responses\ntest_client.mock(:communities_create,\n  status: 201,\n  data: {\n    id: 'comm_test',\n    name: 'Test Community'\n  }\n)\n\n# Run tests\ncommunity = test_client.communities.create(\n  name: 'Test Community'\n)\n")))}d.isMDXComponent=!0}}]);