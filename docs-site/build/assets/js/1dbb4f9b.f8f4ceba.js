"use strict";(self.webpackChunkterrarium_documentation=self.webpackChunkterrarium_documentation||[]).push([[643],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),u=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(m.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,y=p["".concat(m,".").concat(d)]||p[d]||c[d]||i;return t?r.createElement(y,o(o({ref:n},l),{},{components:t})):r.createElement(y,o({ref:n},l))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},29235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(58168),a=(t(96540),t(15680));const i={sidebar_position:3},o="Python SDK",s={unversionedId:"sdk/python",id:"sdk/python",title:"Python SDK",description:"Our Python SDK provides a Pythonic interface to interact with the Terrarium API.",source:"@site/docs/sdk/python.md",sourceDirName:"sdk",slug:"/sdk/python",permalink:"/docs/sdk/python",draft:!1,editUrl:"https://github.com/CharlesIXofFrance/terrarium/tree/main/docs-site/docs/sdk/python.md",tags:[],version:"current",lastUpdatedBy:"samgonzalez",lastUpdatedAt:1736900342,formattedLastUpdatedAt:"Jan 15, 2025",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"JavaScript/TypeScript SDK",permalink:"/docs/sdk/javascript"},next:{title:"Ruby SDK (Beta)",permalink:"/docs/sdk/ruby"}},m={},u=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Type Hints",id:"type-hints",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Caching",id:"caching",level:3},{value:"Webhooks",id:"webhooks",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Async Support",id:"async-support",level:2},{value:"Testing",id:"testing",level:2},{value:"Examples",id:"examples",level:2},{value:"Authentication Flow",id:"authentication-flow",level:3},{value:"Real-time Updates",id:"real-time-updates",level:3},{value:"File Upload",id:"file-upload",level:3}],l={toc:u},p="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"python-sdk"},"Python SDK"),(0,a.yg)("p",null,"Our Python SDK provides a Pythonic interface to interact with the Terrarium API."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# pip\npip install terrarium-sdk\n\n# poetry\npoetry add terrarium-sdk\n\n# pipenv\npipenv install terrarium-sdk\n")),(0,a.yg)("h2",{id:"quick-start"},"Quick Start"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from terrarium import Terrarium\n\n# Initialize the client\nterrarium = Terrarium(api_key="your-api-key")\n\n# Create a community\ncommunity = terrarium.communities.create(\n    name="Tech Hub",\n    description="A community for tech enthusiasts"\n)\n\n# List communities\ncommunities = terrarium.communities.list(\n    page=1,\n    limit=10\n)\n\n# Get a specific community\ncommunity = terrarium.communities.get("comm_123")\n\n# Update a community\nupdated = terrarium.communities.update(\n    "comm_123",\n    name="Updated Name"\n)\n\n# Delete a community\nterrarium.communities.delete("comm_123")\n')),(0,a.yg)("h2",{id:"type-hints"},"Type Hints"),(0,a.yg)("p",null,"The SDK uses Python type hints for better IDE support:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from terrarium.types import Community, CommunityCreateParams\n\n# All params are typed\nparams: CommunityCreateParams = {\n    "name": "My Community",\n    "description": "Description",\n    "settings": {\n        "privacy": "public",\n        "join_mode": "open"\n    }\n}\n\n# Response is typed\ncommunity: Community = terrarium.communities.create(params)\n')),(0,a.yg)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,a.yg)("h3",{id:"custom-configuration"},"Custom Configuration"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'terrarium = Terrarium(\n    api_key="your-api-key",\n    base_url="https://api.custom-domain.com",\n    timeout=30,\n    retries=3,\n    headers={\n        "Custom-Header": "value"\n    },\n    logger={\n        "level": "DEBUG",\n        "handler": lambda level, message, meta: print(f"[{level}] {message}", meta)\n    }\n)\n')),(0,a.yg)("h3",{id:"middleware"},"Middleware"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Add request middleware\n@terrarium.middleware\nasync def log_request(request, next):\n    print("Before request:", request)\n    response = await next(request)\n    print("After request:", response)\n    return response\n\n# Add response middleware\n@terrarium.middleware\nasync def handle_rate_limit(response, next):\n    if response.status == 429:\n        await asyncio.sleep(1)\n        return await next(response.request)\n    return response\n')),(0,a.yg)("h3",{id:"batch-operations"},"Batch Operations"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Create multiple communities\ncommunities = terrarium.communities.create_many([\n    {"name": "Community 1"},\n    {"name": "Community 2"}\n])\n\n# Update multiple communities\nupdated = terrarium.communities.update_many([\n    {"id": "comm_1", "name": "Updated 1"},\n    {"id": "comm_2", "name": "Updated 2"}\n])\n')),(0,a.yg)("h3",{id:"pagination"},"Pagination"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"# Manual pagination\nresponse = terrarium.communities.list(page=1, limit=10)\ncommunities = response.data\nmeta = response.meta\n\n# Automatic pagination\nasync for community in terrarium.communities.iterate():\n    print(community)\n\n# Get all items\nall_communities = terrarium.communities.all()\n")),(0,a.yg)("h3",{id:"caching"},"Caching"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Enable caching\nterrarium = Terrarium(\n    api_key="your-api-key",\n    cache={\n        "enabled": True,\n        "ttl": 60,  # seconds\n        "max_size": 100  # items\n    }\n)\n\n# Cache specific requests\ncommunity = terrarium.communities.get(\n    "comm_123",\n    cache=True,\n    ttl=30\n)\n')),(0,a.yg)("h3",{id:"webhooks"},"Webhooks"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Verify webhook signature\nis_valid = terrarium.webhooks.verify_signature(\n    payload=request.body,\n    signature=request.headers["x-terrarium-signature"],\n    timestamp=request.headers["x-terrarium-timestamp"]\n)\n\n# Handle webhook events\n@terrarium.webhooks.on("community.created")\ndef handle_community_created(event):\n    print("New community:", event.data)\n')),(0,a.yg)("h3",{id:"error-handling"},"Error Handling"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from terrarium.exceptions import APIError, NetworkError\n\ntry:\n    community = terrarium.communities.create(\n        name="My Community"\n    )\nexcept APIError as e:\n    # API-level error\n    print("API Error:", e.message)\n    print("Status:", e.status)\n    print("Code:", e.code)\n    print("Details:", e.details)\nexcept NetworkError as e:\n    # Network-level error\n    print("Network Error:", e.message)\n    print("Request:", e.request)\nexcept Exception as e:\n    # Unknown error\n    print("Unknown error:", e)\n')),(0,a.yg)("h2",{id:"async-support"},"Async Support"),(0,a.yg)("p",null,"The SDK provides async support using ",(0,a.yg)("inlineCode",{parentName:"p"},"asyncio"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from terrarium import AsyncTerrarium\n\n# Initialize async client\nterrarium = AsyncTerrarium(api_key="your-api-key")\n\n# Use async/await\nasync def main():\n    community = await terrarium.communities.create(\n        name="My Community"\n    )\n    print(community)\n\n# Run async code\nasyncio.run(main())\n')),(0,a.yg)("h2",{id:"testing"},"Testing"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Create a test client\ntest_client = Terrarium(\n    api_key="test-api-key",\n    environment="test"\n)\n\n# Mock responses\ntest_client.mock("communities.create", {\n    "status": 201,\n    "data": {\n        "id": "comm_test",\n        "name": "Test Community"\n    }\n})\n\n# Run tests\ncommunity = test_client.communities.create(\n    name="Test Community"\n)\n')),(0,a.yg)("h2",{id:"examples"},"Examples"),(0,a.yg)("h3",{id:"authentication-flow"},"Authentication Flow"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Initialize with refresh token\nterrarium = Terrarium(refresh_token="refresh-token")\n\n# Handle token refresh\n@terrarium.on("token.refresh")\ndef handle_token_refresh(token):\n    # Save new token\n    save_token(token)\n\n# Handle token expiry\n@terrarium.on("token.expired")\ndef handle_token_expired():\n    # Handle expiry\n    redirect_to_login()\n')),(0,a.yg)("h3",{id:"real-time-updates"},"Real-time Updates"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Subscribe to real-time updates\ndef handle_update(community):\n    print("Community updated:", community)\n\ndef handle_delete():\n    print("Community deleted")\n\nsubscription = terrarium.communities.subscribe(\n    "comm_123",\n    on_update=handle_update,\n    on_delete=handle_delete\n)\n\n# Unsubscribe\nsubscription.unsubscribe()\n')),(0,a.yg)("h3",{id:"file-upload"},"File Upload"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Upload community avatar\nwith open("avatar.png", "rb") as f:\n    avatar = terrarium.communities.upload_avatar(\n        "comm_123",\n        file=f,\n        on_progress=lambda progress: print(f"Upload progress: {progress}%")\n    )\n')))}c.isMDXComponent=!0}}]);