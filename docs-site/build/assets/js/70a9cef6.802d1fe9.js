"use strict";(self.webpackChunkterrarium_documentation=self.webpackChunkterrarium_documentation||[]).push([[520],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=m(t),d=a,y=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return t?r.createElement(y,o(o({ref:n},c),{},{components:t})):r.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var m=2;m<i;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89142:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=t(58168),a=(t(96540),t(15680));const i={sidebar_position:2},o="JavaScript/TypeScript SDK",s={unversionedId:"sdk/javascript",id:"sdk/javascript",title:"JavaScript/TypeScript SDK",description:"Our JavaScript/TypeScript SDK provides a type-safe way to interact with the Terrarium API.",source:"@site/docs/sdk/javascript.md",sourceDirName:"sdk",slug:"/sdk/javascript",permalink:"/docs/sdk/javascript",draft:!1,editUrl:"https://github.com/CharlesIXofFrance/terrarium/tree/main/docs-site/docs/sdk/javascript.md",tags:[],version:"current",lastUpdatedBy:"samgonzalez",lastUpdatedAt:1736900342,formattedLastUpdatedAt:"Jan 15, 2025",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Terrarium SDKs",permalink:"/docs/sdk/overview"},next:{title:"Python SDK",permalink:"/docs/sdk/python"}},l={},m=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Type Safety",id:"type-safety",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Caching",id:"caching",level:3},{value:"Webhooks",id:"webhooks",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Browser Support",id:"browser-support",level:2},{value:"Testing",id:"testing",level:2},{value:"TypeScript Configuration",id:"typescript-configuration",level:2},{value:"Examples",id:"examples",level:2},{value:"Authentication Flow",id:"authentication-flow",level:3},{value:"Real-time Updates",id:"real-time-updates",level:3},{value:"File Upload",id:"file-upload",level:3}],c={toc:m},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"javascripttypescript-sdk"},"JavaScript/TypeScript SDK"),(0,a.yg)("p",null,"Our JavaScript/TypeScript SDK provides a type-safe way to interact with the Terrarium API."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install @terrarium/sdk\n\n# yarn\nyarn add @terrarium/sdk\n\n# pnpm\npnpm add @terrarium/sdk\n")),(0,a.yg)("h2",{id:"quick-start"},"Quick Start"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Terrarium } from '@terrarium/sdk';\n\n// Initialize the client\nconst terrarium = new Terrarium({\n  apiKey: 'your-api-key',\n});\n\n// Create a community\nconst community = await terrarium.communities.create({\n  name: 'Tech Hub',\n  description: 'A community for tech enthusiasts',\n});\n\n// List communities\nconst { data, meta } = await terrarium.communities.list({\n  page: 1,\n  limit: 10,\n});\n\n// Get a specific community\nconst community = await terrarium.communities.get('comm_123');\n\n// Update a community\nconst updated = await terrarium.communities.update('comm_123', {\n  name: 'Updated Name',\n});\n\n// Delete a community\nawait terrarium.communities.delete('comm_123');\n")),(0,a.yg)("h2",{id:"type-safety"},"Type Safety"),(0,a.yg)("p",null,"The SDK is written in TypeScript and provides full type definitions:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import { Community, CommunityCreateParams } from '@terrarium/sdk';\n\n// All params are typed\nconst params: CommunityCreateParams = {\n  name: 'My Community',\n  description: 'Description',\n  settings: {\n    privacy: 'public',\n    join_mode: 'open',\n  },\n};\n\n// Response is typed\nconst community: Community = await terrarium.communities.create(params);\n")),(0,a.yg)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,a.yg)("h3",{id:"custom-configuration"},"Custom Configuration"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"const terrarium = new Terrarium({\n  apiKey: 'your-api-key',\n  baseURL: 'https://api.custom-domain.com',\n  timeout: 30000,\n  retries: 3,\n  headers: {\n    'Custom-Header': 'value',\n  },\n  logger: {\n    level: 'debug',\n    handler: (level, message, meta) => {\n      console.log(`[${level}] ${message}`, meta);\n    },\n  },\n});\n")),(0,a.yg)("h3",{id:"middleware"},"Middleware"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Add request middleware\nterrarium.use(async (request, next) => {\n  console.log('Before request:', request);\n  const response = await next(request);\n  console.log('After request:', response);\n  return response;\n});\n\n// Add response middleware\nterrarium.use(async (response, next) => {\n  if (response.status === 429) {\n    await sleep(1000);\n    return next(response.request);\n  }\n  return response;\n});\n")),(0,a.yg)("h3",{id:"batch-operations"},"Batch Operations"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Create multiple communities\nconst communities = await terrarium.communities.createMany([\n  { name: 'Community 1' },\n  { name: 'Community 2' },\n]);\n\n// Update multiple communities\nconst updated = await terrarium.communities.updateMany([\n  { id: 'comm_1', name: 'Updated 1' },\n  { id: 'comm_2', name: 'Updated 2' },\n]);\n")),(0,a.yg)("h3",{id:"pagination"},"Pagination"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Manual pagination\nconst { data, meta } = await terrarium.communities.list({\n  page: 1,\n  limit: 10,\n});\n\n// Automatic pagination\nfor await (const community of terrarium.communities.iterate()) {\n  console.log(community);\n}\n\n// Get all items\nconst allCommunities = await terrarium.communities.all();\n")),(0,a.yg)("h3",{id:"caching"},"Caching"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Enable caching\nconst terrarium = new Terrarium({\n  apiKey: 'your-api-key',\n  cache: {\n    enabled: true,\n    ttl: 60000, // 1 minute\n    maxSize: 100, // items\n  },\n});\n\n// Cache specific requests\nconst community = await terrarium.communities.get('comm_123', {\n  cache: true,\n  ttl: 30000,\n});\n")),(0,a.yg)("h3",{id:"webhooks"},"Webhooks"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Verify webhook signature\nconst isValid = terrarium.webhooks.verifySignature({\n  payload: requestBody,\n  signature: request.headers['x-terrarium-signature'],\n  timestamp: request.headers['x-terrarium-timestamp'],\n});\n\n// Handle webhook events\nterrarium.webhooks.on('community.created', (event) => {\n  console.log('New community:', event.data);\n});\n")),(0,a.yg)("h3",{id:"error-handling"},"Error Handling"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import { APIError, NetworkError } from '@terrarium/sdk';\n\ntry {\n  const community = await terrarium.communities.create({\n    name: 'My Community',\n  });\n} catch (error) {\n  if (error instanceof APIError) {\n    // API-level error\n    console.error('API Error:', error.message);\n    console.error('Status:', error.status);\n    console.error('Code:', error.code);\n    console.error('Details:', error.details);\n  } else if (error instanceof NetworkError) {\n    // Network-level error\n    console.error('Network Error:', error.message);\n    console.error('Request:', error.request);\n  } else {\n    // Unknown error\n    console.error('Unknown error:', error);\n  }\n}\n")),(0,a.yg)("h2",{id:"browser-support"},"Browser Support"),(0,a.yg)("p",null,"The SDK supports all modern browsers:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Chrome \u2265 60"),(0,a.yg)("li",{parentName:"ul"},"Firefox \u2265 55"),(0,a.yg)("li",{parentName:"ul"},"Safari \u2265 11"),(0,a.yg)("li",{parentName:"ul"},"Edge \u2265 79")),(0,a.yg)("p",null,"For older browsers, use a bundler with appropriate polyfills."),(0,a.yg)("h2",{id:"testing"},"Testing"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Create a test client\nconst testClient = new Terrarium({\n  apiKey: 'test-api-key',\n  environment: 'test',\n});\n\n// Mock responses\ntestClient.mock('communities.create', {\n  status: 201,\n  data: {\n    id: 'comm_test',\n    name: 'Test Community',\n  },\n});\n\n// Run tests\nconst community = await testClient.communities.create({\n  name: 'Test Community',\n});\n")),(0,a.yg)("h2",{id:"typescript-configuration"},"TypeScript Configuration"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "es2019",\n    "module": "esnext",\n    "moduleResolution": "node",\n    "strict": true,\n    "types": ["@terrarium/sdk"]\n  }\n}\n')),(0,a.yg)("h2",{id:"examples"},"Examples"),(0,a.yg)("h3",{id:"authentication-flow"},"Authentication Flow"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Initialize with refresh token\nconst terrarium = new Terrarium({\n  refreshToken: 'refresh-token',\n});\n\n// Handle token refresh\nterrarium.on('token.refresh', (token) => {\n  // Save new token\n  localStorage.setItem('token', token);\n});\n\n// Handle token expiry\nterrarium.on('token.expired', () => {\n  // Redirect to login\n  window.location.href = '/login';\n});\n")),(0,a.yg)("h3",{id:"real-time-updates"},"Real-time Updates"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Subscribe to real-time updates\nconst subscription = terrarium.communities.subscribe('comm_123', {\n  onUpdate: (community) => {\n    console.log('Community updated:', community);\n  },\n  onDelete: () => {\n    console.log('Community deleted');\n  },\n});\n\n// Unsubscribe\nsubscription.unsubscribe();\n")),(0,a.yg)("h3",{id:"file-upload"},"File Upload"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"// Upload community avatar\nconst avatar = await terrarium.communities.uploadAvatar('comm_123', {\n  file: fileInput.files[0],\n  onProgress: (progress) => {\n    console.log(`Upload progress: ${progress}%`);\n  },\n});\n")))}p.isMDXComponent=!0}}]);