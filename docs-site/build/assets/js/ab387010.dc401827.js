"use strict";(self.webpackChunkterrarium_documentation=self.webpackChunkterrarium_documentation||[]).push([[237],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>p});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),s=c(t),d=a,p=s["".concat(u,".").concat(d)]||s[d]||g[d]||i;return t?r.createElement(p,o(o({ref:n},l),{},{components:t})):r.createElement(p,o({ref:n},l))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var m={};for(var u in n)hasOwnProperty.call(n,u)&&(m[u]=n[u]);m.originalType=e,m[s]="string"==typeof e?e:a,o[1]=m;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},88167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>m,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const i={sidebar_position:5},o="Go SDK (Beta)",m={unversionedId:"sdk/go",id:"sdk/go",title:"Go SDK (Beta)",description:"Our Go SDK provides a type-safe way to interact with the Terrarium API.",source:"@site/docs/sdk/go.md",sourceDirName:"sdk",slug:"/sdk/go",permalink:"/docs/sdk/go",draft:!1,editUrl:"https://github.com/CharlesIXofFrance/terrarium/tree/main/docs-site/docs/sdk/go.md",tags:[],version:"current",lastUpdatedBy:"samgonzalez",lastUpdatedAt:1736901154,formattedLastUpdatedAt:"Jan 15, 2025",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Ruby SDK (Beta)",permalink:"/docs/sdk/ruby"}},u={},c=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Webhooks",id:"webhooks",level:3},{value:"Testing",id:"testing",level:2}],l={toc:c},s="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(s,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"go-sdk-beta"},"Go SDK (Beta)"),(0,a.yg)("p",null,"Our Go SDK provides a type-safe way to interact with the Terrarium API."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"go get github.com/terrarium/sdk-go\n")),(0,a.yg)("h2",{id:"quick-start"},"Quick Start"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n\n    terrarium "github.com/terrarium/sdk-go"\n)\n\nfunc main() {\n    // Initialize the client\n    client := terrarium.NewClient("your-api-key")\n\n    // Create a community\n    community, err := client.Communities.Create(context.Background(), &terrarium.CommunityCreateParams{\n        Name:        "Tech Hub",\n        Description: "A community for tech enthusiasts",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // List communities\n    communities, err := client.Communities.List(context.Background(), &terrarium.ListParams{\n        Page:  1,\n        Limit: 10,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Get a specific community\n    community, err := client.Communities.Get(context.Background(), "comm_123")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Update a community\n    updated, err := client.Communities.Update(context.Background(), "comm_123", &terrarium.CommunityUpdateParams{\n        Name: "Updated Name",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Delete a community\n    err = client.Communities.Delete(context.Background(), "comm_123")\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n')),(0,a.yg)("h2",{id:"advanced-usage"},"Advanced Usage"),(0,a.yg)("h3",{id:"configuration"},"Configuration"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'client := terrarium.NewClient(\n    "your-api-key",\n    terrarium.WithBaseURL("https://api.custom-domain.com"),\n    terrarium.WithTimeout(30*time.Second),\n    terrarium.WithRetries(3),\n    terrarium.WithHeaders(map[string]string{\n        "Custom-Header": "value",\n    }),\n    terrarium.WithLogger(terrarium.LogLevelDebug),\n)\n')),(0,a.yg)("h3",{id:"error-handling"},"Error Handling"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'community, err := client.Communities.Create(context.Background(), &terrarium.CommunityCreateParams{\n    Name: "My Community",\n})\nif err != nil {\n    switch e := err.(type) {\n    case *terrarium.APIError:\n        fmt.Printf("API Error: %v\\n", e.Message)\n        fmt.Printf("Status: %d\\n", e.Status)\n        fmt.Printf("Code: %s\\n", e.Code)\n    case *terrarium.NetworkError:\n        fmt.Printf("Network Error: %v\\n", e.Error())\n    default:\n        fmt.Printf("Unknown error: %v\\n", err)\n    }\n    return\n}\n')),(0,a.yg)("h3",{id:"batch-operations"},"Batch Operations"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'// Create multiple communities\ncommunities, err := client.Communities.CreateMany(context.Background(), []*terrarium.CommunityCreateParams{\n    {Name: "Community 1"},\n    {Name: "Community 2"},\n})\n\n// Update multiple communities\nupdated, err := client.Communities.UpdateMany(context.Background(), []*terrarium.CommunityUpdateParams{\n    {ID: "comm_1", Name: "Updated 1"},\n    {ID: "comm_2", Name: "Updated 2"},\n})\n')),(0,a.yg)("h3",{id:"pagination"},"Pagination"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},"// Manual pagination\ncommunities, meta, err := client.Communities.List(context.Background(), &terrarium.ListParams{\n    Page:  1,\n    Limit: 10,\n})\n\n// Automatic pagination\niter := client.Communities.Iter(context.Background(), nil)\nfor iter.Next() {\n    community := iter.Community()\n    fmt.Println(community)\n}\nif err := iter.Err(); err != nil {\n    log.Fatal(err)\n}\n\n// Get all items\nallCommunities, err := client.Communities.All(context.Background())\n")),(0,a.yg)("h3",{id:"webhooks"},"Webhooks"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'// Verify webhook signature\nisValid := client.Webhooks.VerifySignature(&terrarium.WebhookParams{\n    Payload:   payload,\n    Signature: signature,\n    Timestamp: timestamp,\n})\n\n// Handle webhook events\nclient.Webhooks.On("community.created", func(event *terrarium.WebhookEvent) {\n    fmt.Printf("New community: %v\\n", event.Data)\n})\n')),(0,a.yg)("h2",{id:"testing"},"Testing"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'// Create a test client\ntestClient := terrarium.NewTestClient("test-api-key")\n\n// Mock responses\ntestClient.Mock("communities.create", &terrarium.MockResponse{\n    Status: 201,\n    Data: map[string]interface{}{\n        "id":   "comm_test",\n        "name": "Test Community",\n    },\n})\n\n// Run tests\ncommunity, err := testClient.Communities.Create(context.Background(), &terrarium.CommunityCreateParams{\n    Name: "Test Community",\n})\n')))}g.isMDXComponent=!0}}]);