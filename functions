

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "pg_catalog";






CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";








ALTER SCHEMA "public" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."app_role" AS ENUM (
    'owner',
    'admin',
    'member',
    'employer'
);


ALTER TYPE "public"."app_role" OWNER TO "postgres";


CREATE TYPE "public"."user_role" AS ENUM (
    'owner',
    'admin',
    'member',
    'employer'
);


ALTER TYPE "public"."user_role" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."custom_access_token_hook"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
declare
  claims jsonb;
  user_role public.app_role;
begin
  -- Fetch the user role in the user_roles table
  select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

  claims := event->'claims';

  if user_role is not null then
    -- Set the claim
    claims := jsonb_set(claims, '{role}', to_jsonb(user_role));
  else
    -- Default to member if no role is set
    claims := jsonb_set(claims, '{role}', '"member"');
  end if;

  -- Update the 'claims' object in the original event
  event := jsonb_set(event, '{claims}', claims);

  -- Return the modified event
  return event;
end;
$$;


ALTER FUNCTION "public"."custom_access_token_hook"("event" "jsonb") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_auth_user_created"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
declare
  first_name text;
  last_name text;
begin
  -- Extract first and last name from metadata
  first_name := new.raw_user_meta_data->>'first_name';
  last_name := new.raw_user_meta_data->>'last_name';

  -- Create profile
  insert into public.profiles (
    id,
    email,
    first_name,
    last_name,
    role,
    onboarding_complete,
    metadata
  )
  values (
    new.id,
    new.email,
    first_name,
    last_name,
    (new.raw_user_meta_data->>'role')::public.app_role,
    false,
    '{}'::jsonb
  );

  return new;
end;
$$;


ALTER FUNCTION "public"."handle_auth_user_created"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END
$$;


ALTER FUNCTION "public"."handle_updated_at"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."has_community_access"("community_id" "uuid") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $_$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM profiles p
        WHERE p.id = auth.uid()
        AND (
            p.role = 'admin'::user_role
            OR EXISTS (
                SELECT 1
                FROM community_members cm
                WHERE cm.profile_id = auth.uid()
                AND cm.community_id = $1
            )
        )
    );
END;
$_$;


ALTER FUNCTION "public"."has_community_access"("community_id" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."is_admin"() RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1
        FROM auth.users
        WHERE id = auth.uid()
        AND role = 'service_role'::text
    );
END;
$$;


ALTER FUNCTION "public"."is_admin"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."is_owner"("community_id" "uuid") RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
BEGIN
    -- Check service_role first
    IF auth.role() = 'service_role' THEN
        RETURN true;
    END IF;

    -- Check if user is authenticated
    IF auth.role() != 'authenticated' THEN
        RETURN false;
    END IF;

    -- Check platform admin
    IF public.is_platform_admin() THEN
        RETURN true;
    END IF;

    -- Check community owner role
    RETURN EXISTS (
        SELECT 1
        FROM community_members cm
        WHERE cm.profile_id = auth.uid()
            AND cm.community_id = community_id
            AND cm.role = 'owner'::user_role
    );
END $$;


ALTER FUNCTION "public"."is_owner"("community_id" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."is_platform_admin"() RETURNS boolean
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
BEGIN
    -- Check service_role first
    IF auth.role() = 'service_role' THEN
        RETURN true;
    END IF;

    -- Check if user is authenticated
    IF auth.role() != 'authenticated' THEN
        RETURN false;
    END IF;

    -- Check admin role
    RETURN EXISTS (
        SELECT 1
        FROM profiles
        WHERE id = auth.uid()
            AND role = 'admin'::user_role
    );
END $$;


ALTER FUNCTION "public"."is_platform_admin"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."log_debug"("message" "text") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RAISE NOTICE 'DEBUG: %', message;
END;
$$;


ALTER FUNCTION "public"."log_debug"("message" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."reset_test_db"() RETURNS "void"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  -- Delete test data
  delete from auth.users where email like '%@example.com';
  delete from public.communities where slug = 'test-community';
  delete from public.profiles where email like '%@example.com';
  delete from public.auth_rate_limits where true;
  delete from public.auth_logs where true;
  
  -- Reset sequences
  alter sequence if exists public.communities_id_seq restart with 1;
  alter sequence if exists public.auth_rate_limits_id_seq restart with 1;
  alter sequence if exists public.auth_logs_id_seq restart with 1;
end;
$$;


ALTER FUNCTION "public"."reset_test_db"() OWNER TO "postgres";


CREATE PROCEDURE "public"."rollback_auth_schema"()
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
    -- Drop application tables
    DROP TABLE IF EXISTS public.community_members CASCADE;
    DROP TABLE IF EXISTS public.communities CASCADE;
    DROP TABLE IF EXISTS public.profiles CASCADE;

    -- Drop application functions
    DROP FUNCTION IF EXISTS public.is_platform_admin CASCADE;
    DROP FUNCTION IF EXISTS public.is_owner CASCADE;
    DROP FUNCTION IF EXISTS public.handle_auth_user_created CASCADE;
    DROP FUNCTION IF EXISTS public.handle_updated_at CASCADE;

    -- Drop application types
    DROP TYPE IF EXISTS public.user_role CASCADE;

    RAISE NOTICE 'Application schema rollback complete';
END;
$$;


ALTER PROCEDURE "public"."rollback_auth_schema"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."test_auth"() RETURNS "jsonb"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
begin
  return jsonb_build_object(
    'authenticated_user', auth.uid(),
    'timestamp', now()
  );
end;
$$;


ALTER FUNCTION "public"."test_auth"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."auth_logs" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "event_type" "text" NOT NULL,
    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);


ALTER TABLE "public"."auth_logs" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."auth_logs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."auth_logs_id_seq" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."auth_logs_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."auth_logs_id_seq1" OWNER TO "postgres";


ALTER SEQUENCE "public"."auth_logs_id_seq1" OWNED BY "public"."auth_logs"."id";



CREATE TABLE IF NOT EXISTS "public"."auth_rate_limits" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "email" "text" NOT NULL,
    "attempts" integer DEFAULT 0,
    "last_attempt" timestamp with time zone DEFAULT "now"(),
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."auth_rate_limits" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."auth_rate_limits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."auth_rate_limits_id_seq" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."communities" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "name" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "description" "text",
    "logo_url" "text",
    "owner_id" "uuid" NOT NULL,
    "settings" "jsonb" DEFAULT '{}'::"jsonb",
    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
    "branding" "jsonb" DEFAULT '{}'::"jsonb",
    "onboarding_completed" boolean DEFAULT false,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);


ALTER TABLE "public"."communities" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."community_members" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "community_id" "uuid" NOT NULL,
    "profile_id" "uuid" NOT NULL,
    "role" "public"."user_role" DEFAULT 'member'::"public"."user_role" NOT NULL,
    "status" "text" DEFAULT 'active'::"text",
    "onboarding_completed" boolean DEFAULT false,
    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);


ALTER TABLE "public"."community_members" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "email" "text" NOT NULL,
    "role" "public"."app_role" DEFAULT 'member'::"public"."app_role" NOT NULL,
    "onboarding_complete" boolean DEFAULT false NOT NULL,
    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "first_name" "text",
    "last_name" "text"
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "role" "public"."app_role" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."user_roles" OWNER TO "postgres";


COMMENT ON TABLE "public"."user_roles" IS 'Application roles for each user.';



ALTER TABLE "public"."user_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."auth_logs" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."auth_logs_id_seq1"'::"regclass");



ALTER TABLE ONLY "public"."auth_logs"
    ADD CONSTRAINT "auth_logs_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."auth_rate_limits"
    ADD CONSTRAINT "auth_rate_limits_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."auth_rate_limits"
    ADD CONSTRAINT "auth_rate_limits_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "communities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "communities_slug_key" UNIQUE ("slug");



ALTER TABLE ONLY "public"."community_members"
    ADD CONSTRAINT "community_members_community_id_profile_id_key" UNIQUE ("community_id", "profile_id");



ALTER TABLE ONLY "public"."community_members"
    ADD CONSTRAINT "community_members_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_role_key" UNIQUE ("user_id", "role");



CREATE INDEX "communities_owner_id_idx" ON "public"."communities" USING "btree" ("owner_id");



CREATE INDEX "communities_slug_idx" ON "public"."communities" USING "btree" ("slug");



CREATE INDEX "community_members_community_role_idx" ON "public"."community_members" USING "btree" ("community_id", "role");



CREATE INDEX "community_members_profile_id_idx" ON "public"."community_members" USING "btree" ("profile_id");



CREATE INDEX "idx_auth_rate_limits_email" ON "public"."auth_rate_limits" USING "btree" ("email");



CREATE OR REPLACE TRIGGER "handle_communities_updated_at" BEFORE UPDATE ON "public"."communities" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();



CREATE OR REPLACE TRIGGER "handle_community_members_updated_at" BEFORE UPDATE ON "public"."community_members" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();



CREATE OR REPLACE TRIGGER "update_auth_rate_limits_updated_at" BEFORE UPDATE ON "public"."auth_rate_limits" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."auth_logs"
    ADD CONSTRAINT "auth_logs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "communities_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."community_members"
    ADD CONSTRAINT "community_members_community_id_fkey" FOREIGN KEY ("community_id") REFERENCES "public"."communities"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Allow auth admin to manage profiles" ON "public"."profiles" TO "supabase_auth_admin" USING (true) WITH CHECK (true);



CREATE POLICY "Allow auth admin to read user roles" ON "public"."user_roles" FOR SELECT TO "supabase_auth_admin" USING (true);



CREATE POLICY "Communities are viewable by everyone." ON "public"."communities" FOR SELECT USING (true);



CREATE POLICY "Community access policy" ON "public"."communities" TO "authenticated" USING (("public"."is_platform_admin"() OR ("owner_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
   FROM "public"."community_members"
  WHERE (("community_members"."community_id" = "communities"."id") AND ("community_members"."profile_id" = "auth"."uid"())))))) WITH CHECK (("public"."is_platform_admin"() OR ("owner_id" = "auth"."uid"())));



CREATE POLICY "Community owners can manage members." ON "public"."community_members" USING ("public"."is_owner"("community_id"));



CREATE POLICY "Community owners can update their communities." ON "public"."communities" FOR UPDATE USING (("auth"."uid"() = "owner_id"));



CREATE POLICY "Members can manage their own membership" ON "public"."community_members" TO "authenticated" USING (("profile_id" = "auth"."uid"())) WITH CHECK (("profile_id" = "auth"."uid"()));



CREATE POLICY "Members can view their communities" ON "public"."community_members" FOR SELECT TO "authenticated" USING ((("profile_id" = "auth"."uid"()) OR ("community_id" IN ( SELECT "cm"."community_id"
   FROM "public"."community_members" "cm"
  WHERE ("cm"."profile_id" = "auth"."uid"())))));



CREATE POLICY "Platform admins can manage all members." ON "public"."community_members" USING ("public"."is_platform_admin"());



CREATE POLICY "Platform admins can update any community." ON "public"."communities" FOR UPDATE USING ("public"."is_platform_admin"());



CREATE POLICY "Service role can manage all profiles" ON "public"."profiles" USING (("auth"."role"() = 'service_role'::"text"));



CREATE POLICY "System can manage rate limits" ON "public"."auth_rate_limits" USING (("auth"."role"() = 'service_role'::"text"));



CREATE POLICY "Users can create their own profile" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can update own profile" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can update their own profile" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can view own profile" ON "public"."profiles" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can view their own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));



ALTER TABLE "public"."auth_rate_limits" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."communities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."community_members" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";
GRANT ALL ON SCHEMA "public" TO "service_role";









































































































































































































REVOKE ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") FROM PUBLIC;
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "supabase_auth_admin";
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_auth_user_created"() TO "service_role";
GRANT ALL ON FUNCTION "public"."handle_auth_user_created"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_auth_user_created"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_auth_user_created"() TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "service_role";
GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."has_community_access"("community_id" "uuid") TO "service_role";
GRANT ALL ON FUNCTION "public"."has_community_access"("community_id" "uuid") TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."is_admin"() TO "service_role";
GRANT ALL ON FUNCTION "public"."is_admin"() TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."is_owner"("community_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."is_owner"("community_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_owner"("community_id" "uuid") TO "service_role";
GRANT ALL ON FUNCTION "public"."is_owner"("community_id" "uuid") TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."is_platform_admin"() TO "anon";
GRANT ALL ON FUNCTION "public"."is_platform_admin"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_platform_admin"() TO "service_role";
GRANT ALL ON FUNCTION "public"."is_platform_admin"() TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."log_debug"("message" "text") TO "service_role";
GRANT ALL ON FUNCTION "public"."log_debug"("message" "text") TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."reset_test_db"() TO "anon";
GRANT ALL ON FUNCTION "public"."reset_test_db"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."reset_test_db"() TO "service_role";
GRANT ALL ON FUNCTION "public"."reset_test_db"() TO "supabase_auth_admin";



GRANT ALL ON PROCEDURE "public"."rollback_auth_schema"() TO "service_role";
GRANT ALL ON PROCEDURE "public"."rollback_auth_schema"() TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."test_auth"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."test_auth"() TO "service_role";
GRANT ALL ON FUNCTION "public"."test_auth"() TO "supabase_auth_admin";



GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "supabase_auth_admin";
























GRANT ALL ON TABLE "public"."auth_logs" TO "service_role";
GRANT ALL ON TABLE "public"."auth_logs" TO "supabase_auth_admin";



GRANT ALL ON SEQUENCE "public"."auth_logs_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "public"."auth_logs_id_seq" TO "supabase_auth_admin";



GRANT ALL ON SEQUENCE "public"."auth_logs_id_seq1" TO "supabase_auth_admin";
GRANT ALL ON SEQUENCE "public"."auth_logs_id_seq1" TO "service_role";



GRANT ALL ON TABLE "public"."auth_rate_limits" TO "service_role";
GRANT ALL ON TABLE "public"."auth_rate_limits" TO "supabase_auth_admin";



GRANT ALL ON SEQUENCE "public"."auth_rate_limits_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "public"."auth_rate_limits_id_seq" TO "supabase_auth_admin";



GRANT ALL ON TABLE "public"."communities" TO "anon";
GRANT ALL ON TABLE "public"."communities" TO "authenticated";
GRANT ALL ON TABLE "public"."communities" TO "service_role";
GRANT ALL ON TABLE "public"."communities" TO "supabase_auth_admin";



GRANT ALL ON TABLE "public"."community_members" TO "anon";
GRANT ALL ON TABLE "public"."community_members" TO "authenticated";
GRANT ALL ON TABLE "public"."community_members" TO "service_role";
GRANT ALL ON TABLE "public"."community_members" TO "supabase_auth_admin";



GRANT ALL ON TABLE "public"."profiles" TO "supabase_auth_admin";
GRANT SELECT,UPDATE ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."user_roles" TO "supabase_auth_admin";
GRANT ALL ON TABLE "public"."user_roles" TO "service_role";



GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "service_role";
GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "supabase_auth_admin";



























RESET ALL;
