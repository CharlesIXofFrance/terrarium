/*
---
affected_tables: []
dependencies: []
description: 'Consolidated rate limits migration

  Migrated from legacy format.'
id: 20250204100900_consolidated_rate_limits
rollback: '-- To be added

  DROP FUNCTION IF EXISTS function_name CASCADE;'
title: Consolidated rate limits migration

---
*/

-- Drop existing policies and table
DROP POLICY IF EXISTS "Anyone can read rate limits" ON auth.rate_limits;
DROP POLICY IF EXISTS "Anyone can insert rate limits" ON auth.rate_limits;
DROP POLICY IF EXISTS "Anyone can update rate limits" ON auth.rate_limits;
DROP TABLE IF EXISTS auth.rate_limits CASCADE;

-- Create rate_limits table
CREATE TABLE auth.rate_limits (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_id text NOT NULL,
    entity_type text NOT NULL,
    action text NOT NULL,
    count integer NOT NULL DEFAULT 1,
    window_start timestamptz NOT NULL DEFAULT now(),
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (entity_id, entity_type, action, window_start)
);

-- Create index for fast lookups
CREATE INDEX rate_limits_lookup_idx ON auth.rate_limits (entity_id, entity_type, action);

-- Enable RLS
ALTER TABLE auth.rate_limits ENABLE ROW LEVEL SECURITY;

-- Grant access to rate_limits
GRANT ALL ON auth.rate_limits TO authenticated;
GRANT ALL ON auth.rate_limits TO anon;

-- Create policies
CREATE POLICY "Anyone can read rate limits"
    ON auth.rate_limits FOR SELECT
    USING (true);

CREATE POLICY "Anyone can insert rate limits"
    ON auth.rate_limits FOR INSERT
    WITH CHECK (true);

CREATE POLICY "Anyone can update rate limits"
    ON auth.rate_limits FOR UPDATE
    USING (true);
